// =============================
// CONTEXT MAP (nível macro)
// - Lista os Bounded Contexts e suas relações estratégicas.
// - Use para visualizar dependências e responsabilidades entre times/sistemas.
// =============================
ContextMap {
  // contains: registra os BCs que compõem este mapa
  contains VendasContexto, EntregaContexto, FaturamentoContexto

  // Customer-Supplier: Vendas (supplier/upstream) influencia Entrega (customer/downstream)
  VendasContexto Upstream-Downstream EntregaContexto 

  // Upstream-Downstream com ACL no downstream: Vendas expõe linguagem/serviços; Faturamento protege seu modelo
  VendasContexto [U]->[D,ACL] FaturamentoContexto 

  // Partnership (P <-> P): colaboração simétrica entre Entrega e Faturamento (ex.: integração por eventos)
  EntregaContexto [P]<->[P] FaturamentoContexto
}

// =============================
// BOUNDED CONTEXT: VENDAS
// - Define o modelo tático de Vendas.
// - Aggregate Pedido agrupa entidades e VOs com invariantes de negócio.
// =============================
BoundedContext VendasContexto {
  Aggregate Pedido {
    Entity Pedido {
      aggregateRoot
      // Identificador do agregado Pedido
      String pedidoId
      // Referências a tipos compostos (Entity/VO/coleções) usam prefixo '-'
      - Cliente cliente
      - List<ItemPedido> itens
      - Endereco enderecoEntrega
    }

    Entity ItemPedido {
      // Item de uma compra (produto + quantidade + preço acordado)
      String produtoId
      int quantidade
      double preco
    }

    Entity Cliente {
      // Entidade do cliente no contexto de Vendas (dados mínimos necessários)
      String clienteId
      String nome
      - Endereco endereco
    }

    ValueObject Endereco {
      // VO imutável com dados de endereço
      String rua
      String cidade
      String cep
    }

    // Evento de domínio disparado quando um pedido é confirmado
    DomainEvent PedidoRealizado
  }

}

// =============================
// BOUNDED CONTEXT: ENTREGA
// - Modelo tático de logística e expedição.
// =============================
BoundedContext EntregaContexto {
  Aggregate Remessa {
    Entity Remessa {
      aggregateRoot
      // Identificador e vínculo ao pedido de origem (referência por ID, não por tipo cruzado)
      String remessaId
      String pedidoId
      - StatusRemessa status
    }

    ValueObject StatusRemessa {
      // VO representando o estado atual e quando foi atualizado
      String status
      Date atualizadoEm
    }

    // Eventos de domínio da remessa
    DomainEvent RemessaIniciada
    DomainEvent RemessaEntregue
  }

}

// =============================
// BOUNDED CONTEXT: FATURAMENTO
// - Responsável por emissão de faturas e processamento de pagamentos.
// =============================
BoundedContext FaturamentoContexto {
  Aggregate Fatura {
    Entity Fatura {
      aggregateRoot
      // Identificador, vínculo ao pedido e valor total faturado
      String faturaId
      String pedidoId
      double valorTotal
      - StatusPagamento status
    }

    ValueObject StatusPagamento {
      // VO refletindo o estado do pagamento e último update
      String status
      Date atualizadoEm
    }

    // Eventos do ciclo de faturamento
    DomainEvent PagamentoRecebido
    DomainEvent FaturaEmitida
  }

}
