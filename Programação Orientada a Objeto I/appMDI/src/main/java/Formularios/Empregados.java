/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package Formularios;

import br.main.appmdi.Empregado;
import br.main.appmdi.EmpregadoCLT;
import br.main.appmdi.EmpregadoHorista;
import br.main.appmdi.FormPrincipal;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author sdc.daniel
 */
public class Empregados extends javax.swing.JInternalFrame {

    /**
     * Creates new form Empregados
     */
    Empregado empregados[] = new Empregado[10];
    static Integer index;
    
    public Empregados() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jRCLT = new javax.swing.JRadioButton();
        jRHorista = new javax.swing.JRadioButton();
        jRTodos = new javax.swing.JRadioButton();
        jBListar = new javax.swing.JButton();

        setClosable(true);
        setMaximizable(true);
        setTitle("Listar Empregados");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Nome", "Endereço", "CPF", "Salário Bruto", "Número de Horas", "Valor da Hora"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        buttonGroup1.add(jRCLT);
        jRCLT.setText("CLT");

        buttonGroup1.add(jRHorista);
        jRHorista.setText("Horista");

        buttonGroup1.add(jRTodos);
        jRTodos.setSelected(true);
        jRTodos.setText("Todos");

        jBListar.setText("Listar");
        jBListar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBListarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jBListar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(jRCLT)
                        .addGap(85, 85, 85)
                        .addComponent(jRHorista)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 147, Short.MAX_VALUE)
                        .addComponent(jRTodos)
                        .addGap(23, 23, 23))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRCLT)
                    .addComponent(jRHorista)
                    .addComponent(jRTodos))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                .addComponent(jBListar)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jBListarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBListarActionPerformed
        // TODO add your handling code here:
        //Criar um objeto JTable para ser modificado via código
        DefaultTableModel model = (DefaultTableModel)jTable1.getModel();
        FormPrincipal form = new FormPrincipal();
        //Recurar a lista de empregados e o index
        Empregado empregados[] = form.getEmpregados();
        Integer index = form.getIndex();
        //Limpando as linhas do jTable
        model.setNumRows(0);
        
        //Estrutura de repetição para Adicionar os Empregados no jTable
        for(int count =0;count<index;count++)
        {
            if(jRCLT.isSelected()||jRTodos.isSelected())
            //Como as informações não são genéricas temos que verificar qual é o tipo
            //do objeto da lista: CLT ou Horista
            if(empregados[count]instanceof EmpregadoCLT){ //se for EmpregadoCLT então imprime
                //Imprimindo o Salario bruto e o Salario Líquido
                EmpregadoCLT temp = (EmpregadoCLT)(empregados[count]); //Cast para deixar os dados compativeis   
            //Adicionando os dados de CLT ao jTable
            model.addRow(new Object[]{temp.getNome(),temp.getEndereco(),temp.getCpf(),temp.getsBrutoCLT()});
            }
            //Verificando se é horista
            if(jRHorista.isSelected()||jRTodos.isSelected())
            if(empregados[count]instanceof EmpregadoHorista){ //se for Horista então imprime
            //Imprimindo o Salario bruto e o Salario Líquido
            EmpregadoHorista temp = (EmpregadoHorista)(empregados[count]); //Cast para deixar os dados compativeis
            //Adicionando os dados de Horista ao jTable
            model.addRow(new Object[]{temp.getNome(),temp.getEndereco(),temp.getCpf(),"",temp.getnHoras(),temp.getPrecoH()});
            
        }  
        }
        
    }//GEN-LAST:event_jBListarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jBListar;
    private javax.swing.JRadioButton jRCLT;
    private javax.swing.JRadioButton jRHorista;
    private javax.swing.JRadioButton jRTodos;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
